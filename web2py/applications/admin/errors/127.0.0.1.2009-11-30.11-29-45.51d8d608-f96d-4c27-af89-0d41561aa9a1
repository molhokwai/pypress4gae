(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/richard/workspace/web2py/applications/admin/controllers/default.py'
p4
sS'code'
p5
S'# coding: utf8 \n\nfrom gluon.admin import *\nimport shutil\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if not send:\n        send = URL(r=request, f=\'site\')\n\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if _config[\'password\'] == CRYPT()(request.vars.password)[0]:\n            session.authorized = True\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            response.flash = T(\'invalid password\')\n\n    # f == file\n    apps = [f for f in os.listdir(apath(r=request)) if f.find(\'.\') < 0]\n\n    return dict(apps=apps, send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n    \n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version == True:\n        return A(T(\'A new version of web2py is available: %s\'\n                                            % version_number), _href=WEB2PY_URL)\n    else:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n\n\ndef logout():\n    """ Logout handler """\n\n    session.authorized = None\n    redirect(URL(r=request, f=\'index\'))\n\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if request.vars.filename and not \'file\' in request.vars:\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(r=request,f=\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n        \n    elif file_or_appurl and not request.vars.filename:\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except:\n                session.flash = T(\'Unable to download app\')\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        installed = app_install(appname, f, request, fname)\n        if installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                                    digest=md5_hash(installed)))\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n    apps = sorted([(f.upper(), f) for f in os.listdir(apath(r=request))\n                                                            if regex.match(f)])\n    apps = [item[1] for item in apps]\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % request.args[0]\n        filename = app_pack(request.args[0], request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % request.args[0]\n        filename = app_pack_compiled(request.args[0], request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/x-gzip\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return open(filename, \'rb\').read()\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(r=request, f=\'site\'))\n\ndef pack_plugin():\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(request.args[0], request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/x-gzip\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return open(filename, \'rb\').read()\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(r=request, f=\'plugin\',args=request.args))\n\ndef uninstall():\n    app = request.args[0]\n    \n    if \'delete\' in request.vars:\n        deleted = app_uninstall(app, request)\n        if deleted:\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(r=request, f=\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(r=request, f=\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    clean = app_cleanup(request.args[0], request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(r=request, f=\'site\'))\n\n\ndef compile_app():\n    c = app_compile(request.args[0], request)\n    if c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = T(\'Cannot compile: there are errors in your app.\\\n        Debug it, correct errors and try again.\')\n    \n    redirect(URL(r=request, f=\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    remove_compiled_application(apath(request.args[0], r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(r=request, f=\'site\'))\n\n    \ndef delete():\n    """ Object delete handler """\n\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(r=request, f=sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(r=request, f=sender))\n    return dict(filename=filename, sender=sender)\n        \ndef peek():\n    """ Visualize object code """\n\n    filename = \'/\'.join(request.args)\n\n    try:\n        data = open(apath(filename, r=request), \'r\').read().replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(r=request, f=\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n\n    app = request.args[0]\n\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n\n    filename = \'/\'.join(request.args)\n\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'text\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if request.vars.revert and os.path.exists(path + \'.bak\'):\n        try:\n            data = open(path + \'.bak\', \'r\').read()\n            data1 = open(path, \'r\').read()\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': T(\'Invalid action\')})\n            else:\n                redirect(URL(r=request, f=\'site\'))\n\n        open(path, \'w\').write(data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        open(path + \'.bak\', \'w\').write(data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = open(path, \'r\').read()\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': T(\'Invalid action\')})\n            else:\n                redirect(URL(r=request, f=\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            open(path + \'.1\', \'w\').write(data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': T(\'file changed on disk\'), \'redirect\': URL(r=request, f=\'resolve\', args=request.args)})\n            else:\n                redirect(URL(r=request, f=\'resolve\', args=request.args))\n        elif request.vars.data:\n            open(path + \'.bak\', \'w\').write(data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            open(path, \'w\').write(data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except:\n            response.flash = T(\'failed to reload module\')\n\n    edit_controller = None\n    view_link = None\n    if filetype == \'html\' and request.args >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(r=request, f=\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = A(T(\'view\'),_href=URL(request.args[0],request.args[2],view))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0] })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences)\n\ndef resolve():\n    """  """\n\n    filename = \'/\'.join(request.args)\n\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'text\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n    a = open(path, \'r\').readlines()\n\n    try:\n        b = open(path + \'.1\', \'r\').readlines()\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(r=request, f=\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\'.join([item[2:] for (i, item) in enumerate(d) if item[0] \\\n                     == \' \' or \'line%i\' % i in request.vars])\n        open(path, \'w\').write(c)\n        session.flash = \'files merged\'\n        redirect(URL(r=request, f=\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n\n    filename = \'/\'.join(request.args)\n\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys())\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for i,key in enumerate(keys):\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=str(i),value=strings[key],_size=70)\n        else:\n            elem = TEXTAREA(_name=str(i), value=strings[key], _cols=70, _rows=5)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % i), _id=str(i)))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for i,key in enumerate(keys):\n            if form.vars[str(i)]==chr(127): continue\n            strs[key] = form.vars[str(i)]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef htmledit():\n    """ Html file edit handler """\n\n    filename = \'/\'.join(request.args)\n\n    # ## check if file is not there\n    data = open(apath(filename, r=request), \'r\').read()\n    try:\n        data = request.vars.data.replace(\'\\r\\n\', \'\\n\')\n        open(apath(filename, r=request), \'w\').write(data)\n        response.flash = T(\'file saved on %(time)s\',\n                           dict(time=time.ctime()))\n    except Exception:\n        pass\n\n    return dict(app=request.args[0], filename=filename, data=data)\n\n\ndef about():\n    """ Read about info """\n\n    app = request.args[0]\n\n    # ## check if file is not there\n    about = open(apath(\'%s/ABOUT\' % app, r=request), \'r\').read()\n    license = open(apath(\'%s/LICENSE\' % app, r=request), \'r\').read()\n\n    return dict(app=app, about=WIKI(about), license=WIKI(license))\n\n\ndef design():\n    """ Application design handler """\n\n    app = request.args[0]\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None:\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(r=request,f=\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that \n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(r=request, f=\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = open(apath(\'%s/models/%s\' % (app, m), r=request), \'r\').read()\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = open(apath(\'%s/controllers/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_expose.findall(data)\n        functions[c] = items\n    \n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = open(apath(\'%s/views/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n    \n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n    \n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n    \n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab): open(crontab,\'w\').write(\'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n    \n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(r=request,f=\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.startswith(plugin_name): \n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:                            \n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(r=request,f=\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n\n    app = request.args(0)\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that \n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(r=request, f=\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = open(apath(\'%s/models/%s\' % (app, m), r=request), \'r\').read()\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = open(apath(\'%s/controllers/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_expose.findall(data)\n        functions[c] = items\n    \n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = open(apath(\'%s/views/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n    \n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n    \n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n    \n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab): open(crontab,\'w\').write(\'#crontab\')\n    \n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n    \n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n\n    try:\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n        \n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                open(path,\'w\').write(\'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            fn = re.sub(\'\\W\', \'\', filename[:-3].lower())\n            text = \'# coding: utf8\\n# %s\\n%s=DAL("sqlite://%s.db")\'\n            text = text % (T(\'try something like\'), fn, fn)\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controlers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            \n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n\n        elif path[-9:] == \'/modules/\':\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python \n                   # coding: utf8 \n                   from gluon.html import *\n                   from gluon.http import *\n                   from gluon.validators import *\n                   from gluon.sqlhtml import *\n                   # request, response, session, cache, T, db(s) \n                   # must be passed and cannot be imported!""")\n\n        elif path[-8:] == \'/static/\':\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        open(full_filename, \'w\').write(text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(r=request, f=\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        open(filename, \'wb\').write(request.vars.file.file.read())\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        session.flash = T(\'cannot upload file "%(filename)s"\',\n                          dict(filename[len(path):]))\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n\n    app = request.args[0]\n\n    for item in request.vars:\n        if item[:7] == \'delete_\':\n            os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n\n    func = lambda p: os.stat(apath(\'%s/errors/%s\' % (app, p), r=request)).st_mtime\n    tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                     key=func,\n                     reverse=True)\n\n    return dict(app=app, tickets=tickets)\n\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = request.args[0]\n        \n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(r=request, f=\'site\'))\n\n    app = request.args[0]\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                traceback=TRACEBACK(e.traceback),\n                code=e.code,\n                layer=e.layer)\n\n\ndef update_languages():\n    """ Update avaliable languages """\n\n    app = request.args[0]\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(r=request, f=\'design/\' + app))\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        page = gluon.tools.fetch(\'http://twitter.com/web2py?format=json\')\n        return sj.loads(page)[\'#timeline\']\n    except:\n        return T(\'Unable to download\')\n\nresponse._vars=response._caller(site)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/richard/workspace/web2py/gluon/restricted.py", line 184, in restricted\n    exec ccode in environment\n  File "/home/richard/workspace/web2py/applications/admin/controllers/default.py", line 989, in <module>\n  File "/home/richard/workspace/web2py/gluon/globals.py", line 103, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/richard/workspace/web2py/applications/admin/controllers/default.py", line 98, in site\n    installed = app_install(appname, f, request, fname)\nUnboundLocalError: local variable \'f\' referenced before assignment\n'
p8
s.